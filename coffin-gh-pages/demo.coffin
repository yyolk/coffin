@Description 'A coffinized AWS cloudformation template'

# params: @Param.<type> <name>, [description], [properties]
@Param.String 'name', 'This description is optional',
  AllowedPattern: '[a-zA-Z][-a-zA-Z0-9]*'
  Default:        'coffinized'
@Param.Number 'port'
@Param.String 'size',
  Default: 'micro'

# mappings: @Mapping <name>, <map>
@Mapping 'instanceMap',
  micro:
    type: 't1.micro'
    ami:  'ami-f570b19c'
  small:
    type: 'm1.small'
    ami:  'ami-f170b198'

# resources: @<resource type with dots> <name>, [properties]
@AWS.IAM.User 'root',
  Path: '/'

# you're free to use arbitrary coffee-script to simplify things
openPort = (port) ->
  IpProtocol: 'tcp'
  FromPort:   port
  ToPort:     port
  CdrIp:      '0.0.0.0/0'
@AWS.EC2.SecurityGroup 'securityGroup',
  SecurityGroupIngress: [
    openPort('22'),
    #referencing params:  @Param.<name>
    openPort(@Params.port)
  ]

@AWS.EC2.Instance 'webserver',
  #referencing maps: @FindInMap <map name>, <key1>, <key2>
  ImageId:      @FindInMap 'instanceMap', @Params.size, 'ami'
  InstanceType: @FindInMap 'instanceMap', @Params.size, 'type'
  #referencing resources: @Resources.<name>
  SecurityGroups: [ @Resources.securityGroup ]

#Outputs: @Output <name>, [description], <value>
@Output 'url',
  @Join '', 'http://', @GetAtt('webserver', 'PublicDnsName')
@Output 'id', 'This description is optional', @Resources.webserver

#If you're using the coffin command line tool, 
#use @ARGV to capture args that appear after the template
@Param.String 'arg', 
  Default: @ARGV[0]
